package hw7;

import java.util.*;


public class MergedIterator<T> implements Iterator<T> {
   private LookAheadIterator<T> i1, i2;
   private Comparator<T> comp;
   T current=null;
   
   public MergedIterator(Iterator<T> iter1, Iterator<T> iter2, Comparator<T> comp) {
      i1 = new LookAheadIterator<T>(iter1);
      i2 = new LookAheadIterator<T>(iter2);
      this.comp = comp;
   }
   
   public boolean hasNext() {
      return i1.hasNext() || i2.hasNext();
   }
   
   public T next() {
      T result;
      T next1 = i1.peek();
      T next2 = i2.peek();
      
      
      
      
      
      if(current==null){
          if(comp.compare(next1, next2)<0)
              result=i1.next;
          else
              result = i2.next();
      }
      
      
      
      
      
      else{
      if (!i1.hasNext()) 
         result = i2.next();
      else if (!i2.hasNext()) 
         result = i1.next();
      else if(((comp.compare(current,next1)>0)&&(comp.compare(current, next2)>0))||((comp.compare(current,next1)<0)&&(comp.compare(current, next2)<0))){
          int smaller1 = comp.compare(next1,next2);
          if(smaller1<0)
              result = i1.next();
          else
              result = i2.next();
      }
      else{
          if(comp.compare(next1, next2)<0)
              result = i2.next();
          else
              result = i1.next();
      }     
   }
      current=result;
      return result;
   }
}

