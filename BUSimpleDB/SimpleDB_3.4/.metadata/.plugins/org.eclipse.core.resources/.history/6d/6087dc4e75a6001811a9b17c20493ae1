package chapter09.cookbook;

import java.util.*;

public class Cookbook {
   private static Map<String,Recipe> cookbook = new HashMap<>();

   public static void main(String[] args) {
      addRecipes();
      printAllRecipes();
      printBasicRecipes();
      printShoppingList(cookbook.get("salad"));
   }

   private static void addRecipes() {
      Recipe dressing = new Recipe("dressing", "Mix thoroughly.");
      dressing.addIngredient(new BasicFood("oil", true), 4);
      dressing.addIngredient(new BasicFood("vinegar", true), 2);
      cookbook.put("dressing", dressing);

      Recipe salad = new Recipe("salad", "Chop lettuce, add bacon. Pour dressing over it.");
      salad.addIngredient(new BasicFood("lettuce", true), 1);
      salad.addIngredient(new BasicFood("bacon", false), 6);
      salad.addIngredient(dressing, 1);
      cookbook.put("salad", salad);
   }

   private static void printAllRecipes() {
      System.out.println("All recipes");
      for (Recipe r : cookbook.values())
         System.out.println(r);
      System.out.println();
   }

   private static void printBasicRecipes() {
      System.out.println("Basic recipes");
      for (Recipe r : cookbook.values()) {
         Iterator<FoodItem> iter = r.childIterator();
         boolean isbasic = true;
         while (iter.hasNext())
               if (! (iter.next() instanceof BasicFood)) {
                  isbasic = false;
                  break;
               }
         if (isbasic)
            System.out.println(r);
      }
   }
   
   private static void printShoppingList(Recipe r) {
      r.forEachChild(item -> {
         if (item instanceof BasicFood)
            System.out.println(item + " " + r.getQuantity(item));
         else
            printShoppingList((Recipe) item);
      });
   }
   
   void printRecipesComprising(Recipe r) {
      System.out.println(r);
      r.forEachChild(item -> {
         if (item instanceof Recipe) {
            Recipe r2 = (Recipe) item;
            printRecipesComprising(r2);
      });
   }
}

