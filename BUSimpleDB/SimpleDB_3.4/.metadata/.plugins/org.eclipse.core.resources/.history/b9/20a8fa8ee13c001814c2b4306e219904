package hw7;

import java.util.*;


public class MergedIterator<T> implements Iterator<T> {
   private LookAheadIterator<T> i1, i2;
   private Comparator<T> comp;
   public T last = null;
   
   public MergedIterator(Iterator<T> iter1, Iterator<T> iter2, Comparator<T> comp) {
      i1 = new LookAheadIterator<T>(iter1);
      i2 = new LookAheadIterator<T>(iter2);
      this.comp = comp;
   }
   
   public boolean hasNext() {
      return i1.hasNext() || i2.hasNext();
   }
   
   public T next() {
      T result;
      if (last == null)
      {
          if (!i1.hasNext()) 
             result = i2.next();
          else if (!i2.hasNext()) 
             result = i1.next();
          else if (comp.compare(i1.peek(), i2.peek()) < 0)
             result = i1.next();
          else
             result = i2.next();
      }
      else
      {
          if (!i1.hasNext())
            result = i2.next;
          else if (!i2.hasNext())
            result = i1.next();
          else if (comp.compare(i1.peek(), last) > 0) {
            if ((comp.compare(i1.peek(), i2.peek()) > 0) && (comp.compare(i2.peek(), last) > 0))
                result = i2.next();
                else result = i1.next();
          }
          else if (comp.compare(i2.peek(), last) > 0) {
            if ((comp.compare(i2.peek(), i1.peek()) > 0) && (comp.compare(i1.peek(), last) > 0))
                result = i1.next();
                else result = i2.next;
          }
          else {
          if (comp.compare(i2.peek(), i1.peek()) > 0)
                result = i1.next();
          else  result = i2.next();
        }
          
      }
      last = result;
      return result;  
   }
   
}

